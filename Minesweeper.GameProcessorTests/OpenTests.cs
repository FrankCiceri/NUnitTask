using NUnit.Framework;
using Minesweeper.Core;



namespace Minesweeper.GameProcessorTests
{
    [TestFixture]
    public class OpenTests
    {
        private GameProcessor gameProcessor;
        [SetUp]
        public void SetUp (){
            bool[,] field = { {true, false,false,false },
                              {false,true, false, false},
                              { true, false,false,false}, };

            gameProcessor = new GameProcessor(field);

        }


        [TestCase(0, 0)]
        //[TestCase(1, 0)]  //this case should give error on test execution since it does not give the expected result, because that position in the array has no mines
        [TestCase(1, 1)]
        public void GameProcessorTests_OpenTest_ReturnsLose(int x, int y)      {

           

             var gameState = gameProcessor.Open(x, y);
             var expected = Core.Enums.GameState.Lose;
             Assert.AreEqual(expected, gameState, "The Open() method does not return the GameState.Lose successfully" );               

            
        }

        [TestCase(0, 0)] 
        //[TestCase(0, 1)] //this case should give error on test execution since it does not throw the exception, because we did not change the status of the game.
        public void GameProcessorTests_OpenTest_ThrowsException(int x, int y)
        {
            var gameState = gameProcessor.Open(x,y);
            Assert.Throws<InvalidOperationException>(()=> gameProcessor.Open(0, 2));      


        }


    }
}